// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract VotingSystem {
    struct Proposal {
        string name;
        uint voteCount;
    }

    struct Voter {
        bool hasVoted;
        uint votedProposalId;
    }

    address public owner;
    mapping(address => Voter) public voters;
    mapping(uint => Proposal) public proposals;
    uint public proposalCount;

    event Voted(address indexed voter, uint proposalId);
    event ProposalAdded(uint proposalId, string name);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized");
        _;
    }

    constructor() {
        owner = msg.sender;
        // Initialize default proposals
        proposals[0] = Proposal("Proposal 1", 0);
        proposals[1] = Proposal("Proposal 2", 0);
        proposalCount = 2;
    }

    function registerVoter(address _voter) public onlyOwner {
        require(!voters[_voter].hasVoted, "Already registered");
        voters[_voter] = Voter(false, 0);
    }

  function vote(uint proposalId) public {
    Voter storage sender = voters[msg.sender];
    require(!sender.hasVoted, "Already voted");
    require(proposalId < proposalCount, "Proposal does not exist"); // Fix this check

    sender.hasVoted = true;
    sender.votedProposalId = proposalId;

    proposals[proposalId].voteCount += 1;
    emit Voted(msg.sender, proposalId);
}

    function addProposal(string memory _name) public onlyOwner {
        proposals[proposalCount] = Proposal(_name, 0);
        emit ProposalAdded(proposalCount, _name); // Emit event for proposal addition
        proposalCount++;
    }

    function getProposal(uint proposalId) public view returns (string memory, uint) {
        Proposal memory proposal = proposals[proposalId];
        return (proposal.name, proposal.voteCount);
    }
}                              
